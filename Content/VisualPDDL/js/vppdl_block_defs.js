'use strict';

goog.provide('Blockly.PDDL');

goog.require('Blockly.Blocks');
goog.require('Blockly');

Blockly.Blocks['pddl_domain'] = {
  init: function() {
    this.appendDummyInput()
        .appendField(new Blockly.FieldTextInput("domain_name"), "NAME");
    this.appendDummyInput()
        .appendField(new Blockly.FieldCheckbox("TRUE"), "STRIPS")
        .appendField("strips");
    this.appendDummyInput()
        .appendField(new Blockly.FieldCheckbox("TRUE"), "FLUENTS")
        .appendField("numeric fluents");
    this.appendDummyInput()
        .appendField(new Blockly.FieldCheckbox("TRUE"), "TIMED_LITERALS")
        .appendField("timed initial literals");
    this.appendStatementInput("types")
        .setCheck("type")
        .appendField("types");
    this.appendStatementInput("predicates")
        .setCheck("predicate_def")
        .appendField("predicates");
    this.appendStatementInput("actions")
        .setCheck("action")
        .appendField("actions");
    this.setColour(120);
 this.setTooltip("This is the pddl domain");
 this.setHelpUrl("https://en.wikipedia.org/wiki/Planning_Domain_Definition_Language");
 this.typesInThisDomain = [["object","object"]];
//  this.getField("STRIPS").updateEditable();
  },

  onchange: function(event) {
    if (!this.workspace || this.workspace.isFlyout) {
      // Block is deleted or is in a flyout.
      return;
    }
    if (event.type == Blockly.Events.BLOCK_CHANGE || event.type == Blockly.Events.BLOCK_MOVE) {
      var newTypesList = [['object','object']];
      var childList = this.getDescendants(true);
      for (let i in childList) {
        if (childList[i].type == 'type') {
            newTypesList.push([childList[i].getField('NAME').getValue(), childList[i].getField('NAME').getValue()]);
        }
        this.typesInThisDomain = newTypesList;
      }

      // Check if type name is duplicate
      if (workspace.isNameUsed(this.getFieldValue('NAME'), this.workspace, this))
        this.setWarningText("This name is already in use.");
      else
        this.setWarningText(null);
    }
  }
};

Blockly.Blocks['action'] = {
  init: function() {
    this.appendDummyInput()
        .appendField(new Blockly.FieldTextInput("action_name"), "NAME");
    this.appendStatementInput("par")
        .setCheck("parameter")
        .appendField("par");
    this.appendStatementInput("con")
        .setCheck(["predicate_call", "and_or", "not"])
        .appendField("con");
    this.appendStatementInput("eff")
        .setCheck(["predicate_call", "and_or", "not"])
        .appendField("eff");
    this.setPreviousStatement(true, "action");
    this.setNextStatement(true, "action");
    this.setColour(15);
 this.setTooltip("");
 this.setHelpUrl("");
 this.parameters_ = [];
  },

  onchange: function(event) {
    if (!this.workspace || this.workspace.isFlyout) {
      // Block is deleted or is in a flyout.
      return;
    }
    if (!event.recordUndo) {
      // Events not generated by user. Skip handling.
      return;
    }
    if (event.type == Blockly.Events.BLOCK_CHANGE || event.type == Blockly.Events.BLOCK_MOVE) {
      // Check if type name is duplicate
      if (workspace.isNameUsed(this.getFieldValue('NAME'), this.workspace, this))
        this.setWarningText("This name is already in use.");
      else
        this.setWarningText(null);
    }
    if (event.type == Blockly.Events.BLOCK_CHANGE || event.type == Blockly.Events.BLOCK_MOVE) {
      var childParamBlocks = this.getDescendants();
      this.parameters_ = [];
      if (childParamBlocks != null) {
        for (let i in childParamBlocks) {
          if (childParamBlocks[i].type == 'parameter')
            this.parameters_.push([childParamBlocks[i].getFieldValue('NAME'), childParamBlocks[i].getFieldValue('type')]);
        }
      }
    }

    // Generate parameter list with names and types
    // if (event.type == Blockly.Events.BLOCK_MOVE || event.type == Blockly.Events.BLOCK_CHANGE) {
    //   var childParamBlocks = this.getDescendants();
    //   if (childParamBlocks != null) {
    //     this.parameters_ = [];
    //     for (var i = 0; i < childParamBlocks.length; i++) {
    //       if (childParamBlocks[i].type == 'parameter') {
    //         this.parameters_.push([childParamBlocks[i].getFieldValue('NAME'), childParamBlocks[i].getFieldValue('type')]);
    //       }
    //     }
    //     console.log(this.parameters_);
    //   }
    // }

    // if there are more than one conditions or effects, insert logic field
    // TODO: This requires domToMutation and mutationToDom to be defined.
    // if (event.type == Blockly.Events.BLOCK_MOVE) {
    //   if (this.getInputTargetBlock("con") == null || this.getInputTargetBlock("con").getDescendants() == null);
    //   else if (this.getInputTargetBlock("con").getDescendants().length > 1) {
    //     if (this.getField("CONDITIONS_LOGIC_AND_OR"));
    //     else {
    //       this.getInput("con").insertFieldAt(1, new Blockly.FieldDropdown([["and","AND"], ["or","OR"]]), "CONDITIONS_LOGIC_AND_OR");
    //     }
    //   }
    //   else {
    //     this.getInput("con").removeField("CONDITIONS_LOGIC_AND_OR", true);
    //   }

    //   if (this.getInputTargetBlock("eff") == null || this.getInputTargetBlock("eff").getDescendants() == null);
    //   else if (this.getInputTargetBlock("eff").getDescendants().length > 1) {
    //     if (this.getField("EFFECTS_LOGIC_AND_OR"));
    //     else {
    //       this.getInput("eff").insertFieldAt(1, new Blockly.FieldDropdown([["and","AND"], ["or","OR"]]), "EFFECTS_LOGIC_AND_OR");
    //     }
    //   }
    //   else {
    //     this.getInput("eff").removeField("EFFECTS_LOGIC_AND_OR", true);
    //   }
    // }
  },

  getParametersInThisAction: function() {
    var returnObj = [];
    for (let i in this.parameters_) {
      returnObj.push(this.parameters_[i]);
    }
    return returnObj;
  }
};

Blockly.Blocks['type'] = {
  init: function() {
    var typesList = new Blockly.FieldDropdown(this.generateTypesList, this.isTypeSelectionValid);
    this.appendDummyInput()
        .appendField(new Blockly.FieldTextInput("type_name"), "NAME")
        .appendField(" - ")
        .appendField(typesList, "parent_list");
    this.setInputsInline(false);
    this.setPreviousStatement(true, "type");
    this.setNextStatement(true, "type");
    this.setColour(240);
 this.setTooltip("");
 this.setHelpUrl("");
 this.typesList_ = [['object','object']];
 this.typesListForChild_ = [['object','object']];
  },

  onchange: function(event) {
    if (!this.workspace || this.workspace.isFlyout) {
      // Block is deleted or is in a flyout.
      return;
    }
    if (event.type == Blockly.Events.BLOCK_CHANGE || event.type == Blockly.Events.BLOCK_MOVE) {
      if (this.getParent() == null) {
        // TODO: Should the list be reset if the block is temporarily unparented (or created by copy-paste)?
        // this.typesListForChild_ = [['object','object']];
      }
      else {
        if (this.getParent().type != "type") {
          this.typesList_ = [['object','object']];
        }
        else {
          this.typesList_ = this.getParent().getTypesListForChild();
        }
        this.typesListForChild_ = [];
        for (let i in this.typesList_) {
          this.typesListForChild_.push(this.typesList_[i]);
        }
        this.typesListForChild_.push([this.getField('NAME').getValue(), this.getField('NAME').getValue()]);
      }

      // Check if type name is duplicate
      if (workspace.isNameUsed(this.getFieldValue('NAME'), this.workspace, this))
        this.setWarningText("This name is already in use.");
      else
        this.setWarningText(null);
    }
  },

  isTypeSelectionValid: function(parentTypeName) {
    if (parentTypeName == this.getSourceBlock().getField('NAME').getValue())
      return null;
    else
      return parentTypeName;
  },

  generateTypesList: function() {
    if (this.getSourceBlock() == null || this.getSourceBlock().isInFlyout) {
      return workspace_pddl_types;
    }
    else
      return this.getSourceBlock().typesList_;
  },

  getTypesListForChild: function() {
    var returnObj = [];
    for (let i in this.typesListForChild_) {
      returnObj.push(this.typesListForChild_[i]);
    }
    return returnObj;
  }
};

Blockly.Blocks['parameter'] = {
  init: function() {
    var typesList = new Blockly.FieldDropdown(this.generateTypesList, this.isTypeSelectionValid);
    this.appendDummyInput()
        .appendField(new Blockly.FieldTextInput("parameter_name"), "NAME")
        .appendField(typesList, "type");
    this.setPreviousStatement(true, "parameter");
    this.setNextStatement(true, "parameter");
    this.setColour(160);
 this.setTooltip("");
 this.setHelpUrl("");
  },
  
  generateTypesList: function() {
    if (this.getSourceBlock() == null)
      return workspace_pddl_types;
    if (this.getSourceBlock().isInFlyout)
      return workspace_pddl_types;
    if (this.getSourceBlock().getParent() != null) {
      if (this.getSourceBlock().getParentDomainBlock() != null)
        return this.getSourceBlock().getParentDomainBlock().typesInThisDomain;
    }
    return workspace_pddl_types;
  },

  isTypeSelectionValid: function(typeName) {
    if (typeName == this.getSourceBlock().getField('NAME').getValue())
      return null;
    else
      return typeName;
  },

  getParentDomainBlock: function() {
    var tempParent = this.getParent();
    while(tempParent != null && tempParent.type != 'pddl_domain')
      tempParent = tempParent.getParent();
    return tempParent;
  }
};

// Blockly.Blocks['predicate_def'] = {
//   init: function() {
//     this.appendDummyInput()
//         .appendField(new Blockly.FieldTextInput("predicate_name"), "PREDICATE_NAME");
//     this.appendStatementInput("NAME")
//         .setCheck("parameter")
//         .appendField("params");
//     this.setPreviousStatement(true, "predicate_def");
//     this.setNextStatement(true, "predicate_def");
//     this.setColour(300);
//  this.setTooltip("");
//  this.setHelpUrl("");
//  this.arguments_=[];
//   },

//   /**
//    * Return the signature of this predicate definition.
//    * @return {!Array} Tuple containing three elements:
//    *     - the name of the defined predicate,
//    *     - a list of all its arguments,
//    *     - that it DOES have a return value.
//    * @this Blockly.Block
//    */
//      getPredicateDef: function() {
//       return [this.getFieldValue('NAME'), this.arguments_, false];
//     },
// };


Blockly.Blocks['predicate_def'] = {
  /**
   * Block for defining a predicate with no return value.
   * @this {Blockly.Block}
   */
  init: function() {
    var initName = Blockly.Predicates.findLegalName('', this);
    var nameField = new Blockly.FieldTextInput(initName,
        Blockly.Predicates.rename);
    nameField.setSpellcheck(false);
    this.appendDummyInput()
        .appendField(nameField, "NAME");
    this.appendStatementInput("PARAM_INPUTS")
        .setCheck("parameter")
        .appendField("params");
    this.setPreviousStatement(true, "predicate_def");
    this.setNextStatement(true, "predicate_def");
    this.setColour(300);
    this.setTooltip('');
    this.setHelpUrl('');
    this.parameterTypesList_ = [];
    // this.arguments_ = [];
    // this.argumentVarModels_ = [];
    // this.setStatements_(false);
    // this.statementConnection_ = null;
  },
  /**
   * Add or remove the statement block from this function definition.
   * @param {boolean} hasStatements True if a statement block is needed.
   * @this {Blockly.Block}
   */
  // setStatements_: function(hasStatements) {
  //   if (this.hasStatements_ === hasStatements) {
  //     return;
  //   }
  //   if (hasStatements) {
  //     this.appendStatementInput('STACK')
  //         .appendField('params');
  //     if (this.getInput('RETURN')) {
  //       this.moveInputBefore('STACK', 'RETURN');
  //     }
  //   } else {
  //     this.removeInput('STACK', true);
  //   }
  //   this.hasStatements_ = hasStatements;
  // },
  /**
   * Update the display of parameters for this predicate definition block.
   * @private
   * @this {Blockly.Block}
   */
  updateParams_: function() {

    // Merge the arguments into a human-readable list.
    // var paramString = '';
    // if (this.arguments_.length) {
    //   paramString = 'PREDICATES_BEFORE_PARAMS' +
    //       ' ' + this.arguments_.join(', ');
    // }
    // // The params field is deterministic based on the mutation,
    // // no need to fire a change event.
    // Blockly.Events.disable();
    // try {
    //   this.setFieldValue(paramString, 'PARAMS');
    // } finally {
    //   Blockly.Events.enable();
    // }
  },
  /**
   * Create XML to represent the argument inputs.
   * @param {boolean=} opt_paramIds If true include the IDs of the parameter
   *     quarks.  Used by Blockly.Predicates.mutateCallers for reconnection.
   * @return {!Element} XML storage element.
   * @this {Blockly.Block}
   */
  mutationToDom: function(opt_paramIds) {
    var container = Blockly.utils.xml.createElement('mutation');
    if (opt_paramIds) {
      container.setAttribute('name', this.getFieldValue('NAME'));
    }
    // for (var i = 0; i < this.argumentVarModels_.length; i++) {
    //   var parameter = Blockly.utils.xml.createElement('arg');
    //   var argModel = this.argumentVarModels_[i];
    //   parameter.setAttribute('name', argModel.name);
    //   parameter.setAttribute('varid', argModel.getId());
    //   if (opt_paramIds && this.paramIds_) {
    //     parameter.setAttribute('paramId', this.paramIds_[i]);
    //   }
    //   container.appendChild(parameter);
    // }
    var parTypList = this.parameterTypesList_;
    for (var i = 0; i < parTypList.length; i++) {
      var parameter = Blockly.utils.xml.createElement('par');
      // var argModel = this.argumentVarModels_[i];
      parameter.setAttribute('name', parTypList[i]);
      // parameter.setAttribute('varid', argModel.getId());
      // if (opt_paramIds && this.paramIds_) {
      //   parameter.setAttribute('paramId', this.paramIds_[i]);
      // }
      container.appendChild(parameter);
    }

    // Save whether the statement input is visible.
    // if (!this.hasStatements_) {
    //   container.setAttribute('statements', 'false');
    // }
    return container;
  },
  /**
   * Parse XML to restore the argument inputs.
   * @param {!Element} xmlElement XML storage element.
   * @this {Blockly.Block}
   */
  domToMutation: function(xmlElement) {
    // this.arguments_ = [];
    // this.argumentVarModels_ = [];
    // for (var i = 0, childNode; (childNode = xmlElement.childNodes[i]); i++) {
    //   if (childNode.nodeName.toLowerCase() == 'arg') {
    //     var varName = childNode.getAttribute('name');
    //     var varId = childNode.getAttribute('varid') || childNode.getAttribute('varId');
    //     this.arguments_.push(varName);
    //     var variable = Blockly.Variables.getOrCreateVariablePackage(
    //         this.workspace, varId, varName, '');
    //     if (variable != null) {
    //       this.argumentVarModels_.push(variable);
    //     } else {
    //       console.log('Failed to create a variable with name ' + varName + ', ignoring.');
    //     }
    //   }
    // }
    // this.updateParams_();
    this.parameterTypesList_ = [];
    for (var i = 0, childNode; (childNode = xmlElement.childNodes[i]); i++) {
      if (childNode.nodeName.toLowerCase() == 'par') {
        var parName = childNode.getAttribute('name');
        this.parameterTypesList_.push(parName);
      }
    }
    this.updateParams_();
    // Blockly.Predicates.mutateCallers(this);

    // Show or hide the statement input.
    // this.setStatements_(xmlElement.getAttribute('statements') !== 'false');
  },
  /**
   * Populate the mutator's dialog with this block's components.
   * @param {!Blockly.Workspace} workspace Mutator's workspace.
   * @return {!Blockly.Block} Root block in mutator.
   * @this {Blockly.Block}
   */
  // decompose: function(workspace) {
  //   /*
  //    * Creates the following XML:
  //    * <block type="predicates_mutatorcontainer">
  //    *   <statement name="STACK">
  //    *     <block type="predicates_mutatorarg">
  //    *       <field name="NAME">arg1_name</field>
  //    *       <next>etc...</next>
  //    *     </block>
  //    *   </statement>
  //    * </block>
  //    */

  //   var containerBlockNode = Blockly.utils.xml.createElement('block');
  //   containerBlockNode.setAttribute('type', 'predicates_mutatorcontainer');
  //   var statementNode = Blockly.utils.xml.createElement('statement');
  //   statementNode.setAttribute('name', 'STACK');
  //   containerBlockNode.appendChild(statementNode);

  //   var node = statementNode;
  //   for (var i = 0; i < this.arguments_.length; i++) {
  //     var argBlockNode = Blockly.utils.xml.createElement('block');
  //     argBlockNode.setAttribute('type', 'predicates_mutatorarg');
  //     var fieldNode = Blockly.utils.xml.createElement('field');
  //     fieldNode.setAttribute('name', 'NAME');
  //     var argumentName = Blockly.utils.xml.createTextNode(this.arguments_[i]);
  //     fieldNode.appendChild(argumentName);
  //     argBlockNode.appendChild(fieldNode);
  //     var nextNode = Blockly.utils.xml.createElement('next');
  //     argBlockNode.appendChild(nextNode);

  //     node.appendChild(argBlockNode);
  //     node = nextNode;
  //   }

  //   var containerBlock = Blockly.Xml.domToBlock(containerBlockNode, workspace);

  //   if (this.type == 'predicate_def') {
  //     containerBlock.setFieldValue(this.hasStatements_, 'STATEMENTS');
  //   } else {
  //     containerBlock.removeInput('STATEMENT_INPUT');
  //   }

  //   // Initialize predicate's callers with blank IDs.
  //   Blockly.Predicates.mutateCallers(this);
  //   return containerBlock;
  // },
  /**
   * Reconfigure this block based on the mutator dialog's components.
   * @param {!Blockly.Block} containerBlock Root block in mutator.
   * @this {Blockly.Block}
   */
  // compose: function(containerBlock) {
  //   // Parameter list.
  //   this.arguments_ = [];
  //   this.paramIds_ = [];
  //   this.argumentVarModels_ = [];
  //   var paramBlock = containerBlock.getInputTargetBlock('STACK');
  //   while (paramBlock && !paramBlock.isInsertionMarker()) {
  //     var varName = paramBlock.getFieldValue('NAME');
  //     this.arguments_.push(varName);
  //     var variable = this.workspace.getVariable(varName, '');
  //     this.argumentVarModels_.push(variable);

  //     this.paramIds_.push(paramBlock.id);
  //     paramBlock = paramBlock.nextConnection &&
  //         paramBlock.nextConnection.targetBlock();
  //   }
  //   this.updateParams_();
  //   Blockly.Predicates.mutateCallers(this);

  //   // Show/hide the statement input.
  //   var hasStatements = containerBlock.getFieldValue('STATEMENTS');
  //   if (hasStatements !== null) {
  //     hasStatements = hasStatements == 'TRUE';
  //     if (this.hasStatements_ != hasStatements) {
  //       if (hasStatements) {
  //         this.setStatements_(true);
  //         // Restore the stack, if one was saved.
  //         Blockly.Mutator.reconnect(this.statementConnection_, this, 'STACK');
  //         this.statementConnection_ = null;
  //       } else {
  //         // Save the stack, then disconnect it.
  //         var stackConnection = this.getInput('STACK').connection;
  //         this.statementConnection_ = stackConnection.targetConnection;
  //         if (this.statementConnection_) {
  //           var stackBlock = stackConnection.targetBlock();
  //           stackBlock.unplug();
  //           stackBlock.bumpNeighbours();
  //         }
  //         this.setStatements_(false);
  //       }
  //     }
  //   }
  // },
  /**
   * Return the signature of this predicate definition.
   * @return {!Array} Tuple containing two elements:
   *     - the name of the defined predicate,
   *     - a list of all its parameters,
   * @this {Blockly.Block}
   */
  getPredicateDef: function() {
    return [this.getFieldValue('NAME'), this.parameterTypesList_, false];
  },
  /**
   * Return all variables referenced by this block.
   * @return {!Array<string>} List of variable names.
   * @this {Blockly.Block}
   */
  // getVars: function() {
  //   return this.arguments_;
  // },
  /**
   * Return all variables referenced by this block.
   * @return {!Array<!Blockly.VariableModel>} List of variable models.
   * @this {Blockly.Block}
   */
  // getVarModels: function() {
  //   return this.argumentVarModels_;
  // },
  /**
   * Notification that a variable is renaming.
   * If the ID matches one of this block's variables, rename it.
   * @param {string} oldId ID of variable to rename.
   * @param {string} newId ID of new variable.  May be the same as oldId, but
   *     with an updated name.  Guaranteed to be the same type as the old
   *     variable.
   * @override
   * @this {Blockly.Block}
   */
  // renameVarById: function(oldId, newId) {
  //   var oldVariable = this.workspace.getVariableById(oldId);
  //   if (oldVariable.type != '') {
  //     // Predicate arguments always have the empty type.
  //     return;
  //   }
  //   var oldName = oldVariable.name;
  //   var newVar = this.workspace.getVariableById(newId);

  //   var change = false;
  //   for (var i = 0; i < this.argumentVarModels_.length; i++) {
  //     if (this.argumentVarModels_[i].getId() == oldId) {
  //       this.arguments_[i] = newVar.name;
  //       this.argumentVarModels_[i] = newVar;
  //       change = true;
  //     }
  //   }
  //   if (change) {
  //     this.displayRenamedVar_(oldName, newVar.name);
  //     Blockly.Predicates.mutateCallers(this);
  //   }
  // },
  /**
   * Notification that a variable is renaming but keeping the same ID.  If the
   * variable is in use on this block, rerender to show the new name.
   * @param {!Blockly.VariableModel} variable The variable being renamed.
   * @package
   * @override
   * @this {Blockly.Block}
   */
  // updateVarName: function(variable) {
  //   var newName = variable.name;
  //   var change = false;
  //   for (var i = 0; i < this.argumentVarModels_.length; i++) {
  //     if (this.argumentVarModels_[i].getId() == variable.getId()) {
  //       var oldName = this.arguments_[i];
  //       this.arguments_[i] = newName;
  //       change = true;
  //     }
  //   }
  //   if (change) {
  //     this.displayRenamedVar_(oldName, newName);
  //     Blockly.Predicates.mutateCallers(this);
  //   }
  // },
  /**
   * Update the display to reflect a newly renamed argument.
   * @param {string} oldName The old display name of the argument.
   * @param {string} newName The new display name of the argument.
   * @private
   * @this {Blockly.Block}
   */
  // displayRenamedVar_: function(oldName, newName) {
  //   this.updateParams_();
  //   // Update the mutator's variables if the mutator is open.
  //   if (this.mutator && this.mutator.isVisible()) {
  //     var blocks = this.mutator.workspace_.getAllBlocks(false);
  //     for (var i = 0, block; (block = blocks[i]); i++) {
  //       if (block.type == 'predicates_mutatorarg' &&
  //           Blockly.Names.equals(oldName, block.getFieldValue('NAME'))) {
  //         block.setFieldValue(newName, 'NAME');
  //       }
  //     }
  //   }
  // },
  /**
   * Add custom menu options to this block's context menu.
   * @param {!Array} options List of menu options to add to.
   * @this {Blockly.Block}
   */
  customContextMenu: function(options) {
    if (this.isInFlyout) {
      return;
    }
    // Add option to create caller.
    var option = {enabled: true};
    var name = this.getFieldValue('NAME');
    option.text = "Create '%1' call".replace('%1', name);
    var xmlMutation = Blockly.utils.xml.createElement('mutation');
    xmlMutation.setAttribute('name', name);
    for (var i = 0; i < this.parameterTypesList_.length; i++) {
      var xmlArg = Blockly.utils.xml.createElement('par');
      xmlArg.setAttribute('name', this.parameterTypesList_[i]);
      xmlMutation.appendChild(xmlArg);
    }
    var xmlBlock = Blockly.utils.xml.createElement('block');
    xmlBlock.setAttribute('type', this.callType_);
    xmlBlock.appendChild(xmlMutation);
    option.callback = Blockly.ContextMenu.callbackFactory(this, xmlBlock);
    options.push(option);

    // Add options to create getters for each parameter.
    // if (!this.isCollapsed()) {
    //   for (var i = 0; i < this.argumentVarModels_.length; i++) {
    //     var argOption = {enabled: true};
    //     var argVar = this.argumentVarModels_[i];
    //     argOption.text = 'VARIABLES_SET_CREATE_GET'
    //         .replace('%1', argVar.name);

    //     var argXmlField = Blockly.Variables.generateVariableFieldDom(argVar);
    //     var argXmlBlock = Blockly.utils.xml.createElement('block');
    //     argXmlBlock.setAttribute('type', 'variables_get');
    //     argXmlBlock.appendChild(argXmlField);
    //     argOption.callback =
    //         Blockly.ContextMenu.callbackFactory(this, argXmlBlock);
    //     options.push(argOption);
    //   }
    // }
  },

  onchange: function(event) {
    if (!this.workspace || this.workspace.isFlyout) {
      // Block is deleted or is in a flyout.
      return;
    }
    if (!event.recordUndo) {
      // Events not generated by user. Skip handling.
      return;
    }
    if (event.type == Blockly.Events.BLOCK_CHANGE || event.type == Blockly.Events.BLOCK_CREATE || event.type == Blockly.Events.BLOCK_MOVE) {
      var childParamBlocks = this.getDescendants();
      // console.log(childParamBlocks);
      var newParamterTypesList = [];
      if (childParamBlocks != null) {
        for (var i = 0; i < childParamBlocks.length; i++) {
          if (childParamBlocks[i].type == 'parameter')
            newParamterTypesList.push(childParamBlocks[i].getFieldValue('type'));
          if (i > 0 && childParamBlocks[i].type != 'parameter')
            break;
        }
      }
      this.parameterTypesList_ = newParamterTypesList;
      console.log(this.parameterTypesList_);
      // var callers = Blockly.Predicates.getCallers(this.getFieldValue('NAME'), this.workspace);
      // console.log(callers.length);
      // for (let i in callers)
      //   callers[i].updateParameterInputs(this.parameterTypesList_);
      Blockly.Predicates.mutateCallers(this);
    }
  },

  callType_: 'predicate_call'
};

// Blockly.Blocks['predicates_mutatorcontainer'] = {
//   /**
//    * Mutator block for predicate container.
//    * @this {Blockly.Block}
//    */
//   init: function() {
//     this.appendDummyInput()
//         .appendField('Mutator Container Title');
//     this.appendStatementInput('STACK');
//     this.appendDummyInput('STATEMENT_INPUT')
//         .appendField('Predicates allow statements')
//         .appendField(new Blockly.FieldCheckbox('TRUE'), 'STATEMENTS');
//     this.setStyle('predicate_blocks');
//     this.setTooltip('PREDICATES_MUTATORCONTAINER_TOOLTIP');
//     this.contextMenu = false;
//   },
// };

// Blockly.Blocks['predicates_mutatorarg'] = {
//   /**
//    * Mutator block for predicate argument.
//    * @this {Blockly.Block}
//    */
//   init: function() {
//     var field = new Blockly.FieldTextInput(
//         Blockly.Predicates.DEFAULT_ARG, this.validator_);
//     // Hack: override showEditor to do just a little bit more work.
//     // We don't have a good place to hook into the start of a text edit.
//     field.oldShowEditorFn_ = field.showEditor_;
//     var newShowEditorFn = function() {
//       this.createdVariables_ = [];
//       this.oldShowEditorFn_();
//     };
//     field.showEditor_ = newShowEditorFn;

//     this.appendDummyInput()
//         .appendField('PREDICATES_MUTATORARG_TITLE')
//         .appendField(field, 'NAME');
//     this.setPreviousStatement(true);
//     this.setNextStatement(true);
//     this.setStyle('predicate_blocks');
//     this.setTooltip('PREDICATES_MUTATORARG_TOOLTIP');
//     this.contextMenu = false;

//     // Create the default variable when we drag the block in from the flyout.
//     // Have to do this after installing the field on the block.
//     field.onFinishEditing_ = this.deleteIntermediateVars_;
//     // Create an empty list so onFinishEditing_ has something to look at, even
//     // though the editor was never opened.
//     field.createdVariables_ = [];
//     field.onFinishEditing_('x');
//   },

//   /**
//    * Obtain a valid name for the predicate argument. Create a variable if
//    * necessary.
//    * Merge runs of whitespace.  Strip leading and trailing whitespace.
//    * Beyond this, all names are legal.
//    * @param {string} varName User-supplied name.
//    * @return {?string} Valid name, or null if a name was not specified.
//    * @private
//    * @this Blockly.FieldTextInput
//    */
//   // validator_: function(varName) {
//   //   var sourceBlock = this.getSourceBlock();
//   //   var outerWs = Blockly.Mutator.findParentWs(sourceBlock.workspace);
//   //   varName = varName.replace(/[\s\xa0]+/g, ' ').replace(/^ | $/g, '');
//   //   if (!varName) {
//   //     return null;
//   //   }

//   //   // Prevents duplicate parameter names in functions
//   //   var workspace = sourceBlock.workspace.targetWorkspace ||
//   //       sourceBlock.workspace;
//   //   var blocks = workspace.getAllBlocks(false);
//   //   var caselessName = varName.toLowerCase();
//   //   for (var i = 0; i < blocks.length; i++) {
//   //     if (blocks[i].id == this.getSourceBlock().id) {
//   //       continue;
//   //     }
//   //     // Other blocks values may not be set yet when this is loaded.
//   //     var otherVar = blocks[i].getFieldValue('NAME');
//   //     if (otherVar && otherVar.toLowerCase() == caselessName) {
//   //       return null;
//   //     }
//   //   }

//   //   // Don't create variables for arg blocks that
//   //   // only exist in the mutator's flyout.
//   //   if (sourceBlock.isInFlyout) {
//   //     return varName;
//   //   }

//   //   var model = outerWs.getVariable(varName, '');
//   //   if (model && model.name != varName) {
//   //     // Rename the variable (case change)
//   //     outerWs.renameVariableById(model.getId(), varName);
//   //   }
//   //   if (!model) {
//   //     model = outerWs.createVariable(varName, '');
//   //     if (model && this.createdVariables_) {
//   //       this.createdVariables_.push(model);
//   //     }
//   //   }
//   //   return varName;
//   // },

//   /**
//    * Called when focusing away from the text field.
//    * Deletes all variables that were created as the user typed their intended
//    * variable name.
//    * @param {string} newText The new variable name.
//    * @private
//    * @this Blockly.FieldTextInput
//    */
//   // deleteIntermediateVars_: function(newText) {
//   //   var outerWs = Blockly.Mutator.findParentWs(this.getSourceBlock().workspace);
//   //   if (!outerWs) {
//   //     return;
//   //   }
//   //   for (var i = 0; i < this.createdVariables_.length; i++) {
//   //     var model = this.createdVariables_[i];
//   //     if (model.name != newText) {
//   //       outerWs.deleteVariableById(model.getId());
//   //     }
//   //   }
//   // }
// };

// Blockly.Blocks['predicate_call'] = {
//   init: function() {
//     this.appendDummyInput()
//         .appendField("predicate_call");
//     this.setPreviousStatement(true, "predicate_call");
//     this.setNextStatement(true, "predicate_call");
//     this.setColour(300);
//  this.setTooltip("");
//  this.setHelpUrl("");
//   }
// };
Blockly.Blocks['predicate_call'] = {
  /**
   * Block for calling a predicate with no return value.
   * @this {Blockly.Block}
   */
  init: function() {
    this.appendDummyInput('TOPROW')
        .appendField('', 'NAME');
    this.setPreviousStatement(true, "predicate_call");
    this.setNextStatement(true, "predicate_call");
    this.setColour(300);
    // this.setStyle('predicate_blocks');
    // Tooltip is set in renamePredicate.
    this.setHelpUrl("");
    // this.arguments_ = [];
    this.parameters_ = [];
    this.parameterTypesList_ = [];
    // this.argumentVarModels_ = [];
    // this.quarkConnections_ = {};
    // this.quarkIds_ = null;
    this.previousEnabledState_ = true;
  },

  /**
   * Returns the name of the predicate this block calls.
   * @return {string} Predicate name.
   * @this {Blockly.Block}
   */
  getPredicateCall: function() {
    // The NAME field is guaranteed to exist, null will never be returned.
    return /** @type {string} */ (this.getFieldValue('NAME'));
  },
  /**
   * Notification that a predicate is renaming.
   * If the name matches this block's predicate, rename it.
   * @param {string} oldName Previous name of predicate.
   * @param {string} newName Renamed predicate.
   * @this {Blockly.Block}
   */
  renamePredicate: function(oldName, newName) {
    if (Blockly.Names.equals(oldName, this.getPredicateCall())) {
      this.setFieldValue(newName, 'NAME');
      var baseMsg = 'Use the predicate %1 in an action block';
      this.setTooltip(baseMsg.replace('%1', newName));
    }
  },
  /**
   * Notification that the predicate's parameters have changed.
   * @param {!Array<string>} paramNames New param names, e.g. ['x', 'y', 'z'].
   * @param {!Array<string>} paramIds IDs of params (consistent for each
   *     parameter through the life of a mutator, regardless of param renaming),
   *     e.g. ['piua', 'f8b_', 'oi.o'].
   * @private
   * @this {Blockly.Block}
   */
  setPredicateParameters_: function(paramNames, paramIds) {
    // Data structures:
    // this.arguments = ['x', 'y']
    //     Existing param names.
    // this.quarkConnections_ {piua: null, f8b_: Blockly.Connection}
    //     Look-up of paramIds to connections plugged into the call block.
    // this.quarkIds_ = ['piua', 'f8b_']
    //     Existing param IDs.
    // Note that quarkConnections_ may include IDs that no longer exist, but
    // which might reappear if a param is reattached in the mutator.
    // var defBlock = Blockly.Predicates.getDefinition(this.getPredicateCall(),
    //     this.workspace);
    // var mutatorOpen = defBlock && defBlock.mutator &&
    //     defBlock.mutator.isVisible();
    // if (!mutatorOpen) {
    //   this.quarkConnections_ = {};
    //   this.quarkIds_ = null;
    // }
    // if (!paramIds) {
    //   // Reset the quarks (a mutator is about to open).
    //   return;
    // }
    // Test arguments (arrays of strings) for changes. '\n' is not a valid
    // argument name character, so it is a valid delimiter here.
    // if (paramNames.join('\n') == this.arguments_.join('\n')) {
    //   // No change.
    //   this.quarkIds_ = paramIds;
    //   return;
    // }
    // if (paramIds.length != paramNames.length) {
    //   throw RangeError('paramNames and paramIds must be the same length.');
    // }
    // this.setCollapsed(false);
    // if (!this.quarkIds_) {
    //   // Initialize tracking for this block.
    //   this.quarkConnections_ = {};
    //   this.quarkIds_ = [];
    // }
    // Switch off rendering while the block is rebuilt.
    // var savedRendered = this.rendered;
    // this.rendered = false;
    // Update the quarkConnections_ with existing connections.
    // for (var i = 0; i < this.arguments_.length; i++) {
    //   var input = this.getInput('ARG' + i);
    //   if (input) {
    //     var connection = input.connection.targetConnection;
    //     this.quarkConnections_[this.quarkIds_[i]] = connection;
    //     if (mutatorOpen && connection &&
    //         paramIds.indexOf(this.quarkIds_[i]) == -1) {
    //       // This connection should no longer be attached to this block.
    //       connection.disconnect();
    //       connection.getSourceBlock().bumpNeighbours();
    //     }
    //   }
    // }
    // Rebuild the block's arguments.
    // this.arguments_ = [].concat(paramNames);
    // And rebuild the argument model list.
    // this.argumentVarModels_ = [];
    // for (var i = 0; i < this.arguments_.length; i++) {
    //   var variable = Blockly.Variables.getOrCreateVariablePackage(
    //       this.workspace, null, this.arguments_[i], '');
    //   this.argumentVarModels_.push(variable);
    // }

    this.updateShape_();
    this.parameterTypesList_ = paramNames;
    this.updateParameterInputs(paramNames);
    // this.quarkIds_ = paramIds;
    // Reconnect any child blocks.
    // if (this.quarkIds_) {
    //   for (var i = 0; i < this.arguments_.length; i++) {
    //     var quarkId = this.quarkIds_[i];
    //     if (quarkId in this.quarkConnections_) {
    //       var connection = this.quarkConnections_[quarkId];
    //       if (!Blockly.Mutator.reconnect(connection, this, 'ARG' + i)) {
    //         // Block no longer exists or has been attached elsewhere.
    //         delete this.quarkConnections_[quarkId];
    //       }
    //     }
    //   }
    // }
    // Restore rendering and show the changes.
    // this.rendered = savedRendered;
    // if (this.rendered) {
    //   this.render();
    // }
  },
  /**
   * Modify this block to have the correct number of arguments.
   * @private
   * @this {Blockly.Block}
   */
  updateShape_: function() {
    // for (var i = 0; i < this.arguments_.length; i++) {
    //   var field = this.getField('ARGNAME' + i);
    //   if (field) {
    //     // Ensure argument name is up to date.
    //     // The argument name field is deterministic based on the mutation,
    //     // no need to fire a change event.
    //     Blockly.Events.disable();
    //     try {
    //       field.setValue(this.arguments_[i]);
    //     } finally {
    //       Blockly.Events.enable();
    //     }
    //   } else {
    //     // Add new input.
    //     field = new Blockly.FieldLabel(this.arguments_[i]);
    //     var input = this.appendValueInput('ARG' + i)
    //         .setAlign(Blockly.ALIGN_RIGHT)
    //         .appendField(field, 'ARGNAME' + i);
    //     input.init();
    //   }
    // }
    // Remove deleted inputs.
    // while (this.getInput('ARG' + i)) {
    //   this.removeInput('ARG' + i);
    //   i++;
    // }
    // Add 'with:' if there are parameters, remove otherwise.
    // var topRow = this.getInput('TOPROW');
    // if (topRow) {
    //   if (this.arguments_.length) {
    //     if (!this.getField('WITH')) {
    //       topRow.appendField('PREDICATES_CALL_BEFORE_PARAMS', 'WITH');
    //       topRow.init();
    //     }
    //   } else {
    //     if (this.getField('WITH')) {
    //       topRow.removeField('WITH');
    //     }
    //   }
    // }
  },
  /**
   * Create XML to represent the (non-editable) name and arguments.
   * @return {!Element} XML storage element.
   * @this {Blockly.Block}
   */
  mutationToDom: function() {
    var container = Blockly.utils.xml.createElement('mutation');
    container.setAttribute('name', this.getPredicateCall());
    // for (var i = 0; i < this.arguments_.length; i++) {
    //   var parameter = Blockly.utils.xml.createElement('arg');
    //   parameter.setAttribute('name', this.arguments_[i]);
    //   container.appendChild(parameter);
    // }
    for (var i = 0; i < this.parameterTypesList_.length; i++) {
      var parameter = Blockly.utils.xml.createElement('par');
      parameter.setAttribute('name', this.parameterTypesList_[i]);
      container.appendChild(parameter);
    }
    return container;
  },
  /**
   * Parse XML to restore the (non-editable) name and parameters.
   * @param {!Element} xmlElement XML storage element.
   * @this {Blockly.Block}
   */
  domToMutation: function(xmlElement) {
    var name = xmlElement.getAttribute('name');
    this.renamePredicate(this.getPredicateCall(), name);
    var pars = [];
    var paramIds = [];
    for (var i = 0, childNode; (childNode = xmlElement.childNodes[i]); i++) {
      if (childNode.nodeName.toLowerCase() == 'par') {
        pars.push(childNode.getAttribute('name'));
        // paramIds.push(childNode.getAttribute('paramId'));
      }
    }
    this.setPredicateParameters_(pars, paramIds);
  },
  /**
   * Return all variables referenced by this block.
   * @return {!Array<string>} List of variable names.
   * @this {Blockly.Block}
   */
  // getVars: function() {
  //   return this.arguments_;
  // },
  /**
   * Return all variables referenced by this block.
   * @return {!Array<!Blockly.VariableModel>} List of variable models.
   * @this {Blockly.Block}
   */
  // getVarModels: function() {
  //   return this.argumentVarModels_;
  // },
  /**
   * Predicate calls cannot exist without the corresponding predicate
   * definition.  Enforce this link whenever an event is fired.
   * @param {!Blockly.Events.Abstract} event Change event.
   * @this {Blockly.Block}
   */
  onchange: function(event) {
    if (!this.workspace || this.workspace.isFlyout) {
      // Block is deleted or is in a flyout.
      return;
    }
    if (!event.recordUndo) {
      // Events not generated by user. Skip handling.
      return;
    }
    if (event.type == Blockly.Events.BLOCK_CREATE &&
        event.ids.indexOf(this.id) != -1) {
      // Look for the case where a predicate call was created (usually through
      // paste) and there is no matching definition.  In this case, create
      // an empty definition block with the correct signature.
      var name = this.getPredicateCall();
      var def = Blockly.Predicates.getDefinition(name, this.workspace);
      if (def && (def.type != this.defType_ )) {
        // The signatures don't match.
        def = null;
      }
      if (!def) {
        Blockly.Events.setGroup(event.group);
        /**
         * Create matching definition block.
         * <xml xmlns="https://developers.google.com/blockly/xml">
         *   <block type="predicate_def" x="10" y="20">
         *     <mutation name="test">
         *       <arg name="x"></arg>
         *     </mutation>
         *     <field name="NAME">test</field>
         *   </block>
         * </xml>
         */
        var xml = Blockly.utils.xml.createElement('xml');
        var block = Blockly.utils.xml.createElement('block');
        block.setAttribute('type', this.defType_);
        var xy = this.getRelativeToSurfaceXY();
        var x = xy.x + Blockly.SNAP_RADIUS * (this.RTL ? -1 : 1);
        var y = xy.y + Blockly.SNAP_RADIUS * 2;
        block.setAttribute('x', x);
        block.setAttribute('y', y);
        var mutation = this.mutationToDom();
        block.appendChild(mutation);
        var field = Blockly.utils.xml.createElement('field');
        field.setAttribute('name', 'NAME');
        var callName = this.getPredicateCall();
        if (!callName) {
          // Rename if name is empty string.
          callName = Blockly.Predicates.findLegalName('', this);
          this.renamePredicate('', callName);
        }
        field.appendChild(Blockly.utils.xml.createTextNode(callName));
        block.appendChild(field);
        xml.appendChild(block);
        Blockly.Xml.domToWorkspace(xml, this.workspace);
        Blockly.Events.setGroup(false);
      }
    } else if (event.type == Blockly.Events.BLOCK_DELETE) {
      // Look for the case where a predicate definition has been deleted,
      // leaving this block (a predicate call) orphaned.  In this case, delete
      // the orphan.
      var name = this.getPredicateCall();
      var def = Blockly.Predicates.getDefinition(name, this.workspace);
      if (!def) {
        Blockly.Events.setGroup(event.group);
        this.dispose(true);
        Blockly.Events.setGroup(false);
      }
    } else if (event.type == Blockly.Events.CHANGE && event.element == 'disabled') {
      var name = this.getPredicateCall();
      var def = Blockly.Predicates.getDefinition(name, this.workspace);
      if (def && def.id == event.blockId) {
        // in most cases the old group should be ''
        var oldGroup = Blockly.Events.getGroup();
        if (oldGroup) {
          // This should only be possible programmatically and may indicate a problem
          // with event grouping. If you see this message please investigate. If the
          // use ends up being valid we may need to reorder events in the undo stack.
          console.log('Saw an existing group while responding to a definition change');
        }
        Blockly.Events.setGroup(event.group);
        if (event.newValue) {
          this.previousEnabledState_ = this.isEnabled();
          this.setEnabled(false);
        } else {
          this.setEnabled(this.previousEnabledState_);
        }
        Blockly.Events.setGroup(oldGroup);
      }
    }
  },
  /**
   * Add menu option to find the definition block for this call.
   * @param {!Array} options List of menu options to add to.
   * @this {Blockly.Block}
   */
  customContextMenu: function(options) {
    if (!this.workspace.isMovable()) {
      // If we center on the block and the workspace isn't movable we could
      // loose blocks at the edges of the workspace.
      return;
    }

    var option = {enabled: true};
    option.text = 'Show corresponding predicate definition';
    var name = this.getPredicateCall();
    var workspace = this.workspace;
    option.callback = function() {
      var def = Blockly.Predicates.getDefinition(name, workspace);
      if (def) {
        workspace.centerOnBlock(def.id);
        def.select();
      }
    };
    options.push(option);
  },

  updateParameterInputs: function(parameterTypesList){
    var inputFields = this.getInput('TOPROW').fieldRow;
    var numParameterFields = inputFields.length - 1;
    // var availableParameters = this.getParentActionBlock().getParametersInThisAction();
    for (i = 0; i < parameterTypesList.length; i++) {
      var fieldName = 'paramField' + i + ';' + parameterTypesList[i];
      // fieldName.replace('%1', i);
      // fieldName.replace('%2', parameterTypesList[i]);
      if (i >= numParameterFields) {
        var newDropDown = new Blockly.FieldDropdown(this.generateParameterDropDown);
        console.log(fieldName);
        // newDropDown.name = fieldName;
        // Insert new field
        this.getInput('TOPROW').insertFieldAt(i+1, newDropDown, fieldName);
      }
      else {
        console.log(inputFields);
        if (inputFields[i+1].name == 'NAME'){
          continue;
        }
        else if (inputFields[i+1].name.split(";")[1] == parameterTypesList[i]) {
          continue;
        }
        else {
          inputFields[i+1].name = fieldName;
        }
      }
    }
    if (parameterTypesList.length < numParameterFields) {
      for (var i = numParameterFields; i > parameterTypesList.length; i--) {
        this.getInput('TOPROW').removeField(inputFields[i].name, true);
      }
    }
  },
  
  generateParameterDropDown: function () {
    if (this.getSourceBlock() == null)
      return [["select","SELECT"]];
    if (this.getSourceBlock().isInFlyout)
      return [["select","SELECT"]];
    if (this.getSourceBlock().getParent() != null) {
      if (this.getSourceBlock().getParentActionBlock() != null) {
        var returnList = [["select","SELECT"]];
        var availableParamList = this.getSourceBlock().getParentActionBlock().parameters_;
        for (var i = 0; i < availableParamList.length; i++) {
          if (this.name.split(";")[1] == availableParamList[i][1])
            returnList.push([availableParamList[i][0], availableParamList[i][0]]);
        }
        console.log(returnList);
        return returnList;
      }
    }
    return [["select","SELECT"]];
  },

  getParentActionBlock: function() {
    var tempParent = this.getParent();
    while(tempParent != null && tempParent.type != 'action')
      tempParent = tempParent.getParent();
    return tempParent;
  },

  defType_: 'predicate_def'
};

Blockly.Blocks['and_or'] = {
  init: function() {
    this.appendStatementInput("PREDICATE_CALLS")
        .setCheck("predicate_call")
        .appendField(new Blockly.FieldDropdown([["and","AND"], ["or","OR"]]), "LOGIC_OPERATION");
    this.setPreviousStatement(true, "predicate_call");
    this.setNextStatement(true, "predicate_call");
    this.setColour(0);
 this.setTooltip("");
 this.setHelpUrl("");
  }
};

Blockly.Blocks['not'] = {
  init: function() {
    this.appendStatementInput("PREDICATE_CALLS")
        .setCheck("predicate_call")
        .appendField("not");
    this.setPreviousStatement(true, ["predicate_call", "not"]);
    this.setNextStatement(true, ["predicate_call", "not"]);
    this.setColour(300);
 this.setTooltip("");
 this.setHelpUrl("");
  }
};