'use strict';

goog.provide('Blockly.PDDL');

goog.require('Blockly.Blocks');
goog.require('Blockly');

Blockly.Blocks['state'] = {
  init: function () {
    var statesList0 = new Blockly.FieldDropdown(this.generateStatesList);
    var statesList1 = new Blockly.FieldDropdown(this.generateStatesList);
    var statesList2 = new Blockly.FieldDropdown(this.generateStatesList);
    var statesList3 = new Blockly.FieldDropdown(this.generateStatesList);
    var statesList4 = new Blockly.FieldDropdown(this.generateStatesList);
    this.appendDummyInput()
      .appendField("state_id")
      .appendField(new Blockly.FieldTextInput("0"), "state_id")
      .appendField("description")
      .appendField(new Blockly.FieldTextInput(" "), "state_description");
    this.appendDummyInput()
      .appendField("state_type")
      .appendField(new Blockly.FieldDropdown([["regular", "regular"], ["starting", "starting"], ["ending", "ending"]]), "type");
    this.appendStatementInput("function_1")
      .setCheck("function_1")
      .appendField("function_1");
    this.appendStatementInput("function_2")
      .setCheck("function_2")
      .appendField("function_2");
    this.appendDummyInput()
      .appendField("Nothing occured")
      .appendField(statesList0, "transition_0");
    this.appendDummyInput()
      .appendField("Expected output occured")
      .appendField(statesList1, "transition_1");
    this.appendDummyInput()
      .appendField("Timeout occured")
      .appendField(statesList2, "transition_2");
    this.appendDummyInput()
      .appendField("Got command to stop")
      .appendField(statesList3, "transition_3");
    this.appendDummyInput()
      .appendField("Fault occured")
      .appendField(statesList4, "transition_4");
    this.setPreviousStatement(true, "state");
    this.setNextStatement(true, "state");
    this.setColour(230);
    this.setTooltip("Represents a Node");
    this.setHelpUrl("");
    this.statesList_ = [['object', 'object']];
  },
  onchange: function (event) {
    if (!this.workspace || this.workspace.isFlyout) {
      // Block is deleted or is in a flyout.
      return;
    }
    if(event.type == Blockly.Events.FINISHED_LOADING){
      this.statesList_ = this.generateStatesList;
    }
    if (event.type == Blockly.Events.SELECTED && event.newElementId != null) {
      if (this.workspace.getBlockById(event.newElementId).type != 'state') {
        return;
      }
      if (event.newElementId != this.id && this.getParent() != null) {
        this.setCollapsed(true);
      }
      else {
        this.setCollapsed(false);
      }
    }
    if (!event.recordUndo) {
      // Events not generated by user. Skip handling.
      return;
    }
    // Check if type name is duplicate
    if (workspace.isNameUsed(this.getFieldValue('state_id'), this.workspace, this))
      this.setWarningText("This state is already defined.");
    else if (workspace.isNameUsed(this.getFieldValue('state_description'), this.workspace, this))
    this.setWarningText("Duplicate description.");
    else
      this.setWarningText(null);
  },
  mutationToDom: function() {
    var container = document.createElement('mutation');
    var transition_0 = this.getFieldValue('transition_0');
    var transition_1 = this.getFieldValue('transition_1');
    var transition_2 = this.getFieldValue('transition_2');
    var transition_3 = this.getFieldValue('transition_3');
    var transition_4 = this.getFieldValue('transition_4');
    container.setAttribute('transition_0', transition_0);
    container.setAttribute('transition_1', transition_1);
    container.setAttribute('transition_2', transition_2);
    container.setAttribute('transition_3', transition_3);
    container.setAttribute('transition_4', transition_4);
    return container;
  },

  domToMutation: function(xmlElement) {
    this.statesList_ = [[xmlElement.getAttribute('transition_0'), xmlElement.getAttribute('transition_0')]];
    this.statesList_.push([xmlElement.getAttribute('transition_1'), xmlElement.getAttribute('transition_1')]);
    this.statesList_.push([xmlElement.getAttribute('transition_2'), xmlElement.getAttribute('transition_2')]);
    this.statesList_.push([xmlElement.getAttribute('transition_3'), xmlElement.getAttribute('transition_3')]);
    this.statesList_.push([xmlElement.getAttribute('transition_4'), xmlElement.getAttribute('transition_4')]);
    console.log(this.statesList_); // Hack
    // this.updateShape_(xmlElement.getAttribute('parenttypename'));
  },
  generateStatesList: function () {
    var options = [["", ""]];
    if (null != this.getSourceBlock() && null != this.getSourceBlock().workspace) {
      var blocks = this.getSourceBlock().workspace.getBlocksByType('state', true);
      if (blocks.length > 0) {
        for (var i = 0; i < blocks.length; i++) {
          options.push([blocks[i].getFieldValue('state_id') + ' ' + blocks[i].getFieldValue('state_description'), blocks[i].getFieldValue('state_id')]);
        }
      }
    }
    return options;
  }
};

Blockly.Blocks['machine'] = {
  init: function() {
    this.appendStatementInput("state")
        .setCheck("state")
        .appendField(new Blockly.FieldTextInput("Machine Name"), "sm_name");
    this.setColour(315);
 this.setTooltip("");
 this.setHelpUrl("");
  }
};

Blockly.Blocks['action'] = {
  init: function () {
    this.appendValueInput("NAME")
      .setCheck("String")
      .appendField("function_name");
    this.appendValueInput("param")
      .setCheck(null)
      .appendField("params");
    this.appendValueInput("description")
      .setCheck("String")
      .appendField("description");
    this.setPreviousStatement(true, ["state", "action"]);
    this.setNextStatement(true, ["state", "action"]);
    this.setColour(120);
    this.setTooltip("");
    this.setHelpUrl("");
  },
  onchange: function (event) {
    if (!this.workspace || this.workspace.isFlyout) {
      // Block is deleted or is in a flyout.
      return;
    }
    if (!event.recordUndo) {
      // Events not generated by user. Skip handling.
      return;
    }

    // Check if type name is duplicate
    if (workspace.isNameUsed(this.getFieldValue('function_name'), this.workspace, this))
      this.setWarningText("This action is already defined.");
    else
      this.setWarningText(null);
  }
};

Blockly.Blocks['function_1'] = {
  init: function () {
    this.appendDummyInput()
      .appendField("function_1")
      .appendField(new Blockly.FieldDropdown(functions_1), "action_name");
    this.appendDummyInput()
      .appendField("param")
      .appendField(new Blockly.FieldTextInput("0"), "param");
    this.setPreviousStatement(true, "function_1");
    this.setNextStatement(true, "function_1");
    this.setColour(120);
    this.setTooltip("");
    this.setHelpUrl("");
  },
  onchange: function (event) {
    if (!this.workspace || this.workspace.isFlyout) {
      // Block is deleted or is in a flyout.
      return;
    }
    if (!event.recordUndo) {
      // Events not generated by user. Skip handling.
      return;
    }
  }
};

Blockly.Blocks['function_2'] = {
  init: function () {
    this.appendDummyInput()
      .appendField("function_2")
      .appendField(new Blockly.FieldDropdown(functions_2), "action_name");
    this.appendDummyInput()
      .appendField("param")
      .appendField(new Blockly.FieldTextInput("0"), "param");
    this.appendDummyInput()
      .appendField("timeout")
      .appendField(new Blockly.FieldTextInput("0"), "timeout");
    this.setPreviousStatement(true, "function_2");
    this.setNextStatement(true, "function_2");
    this.setColour(180);
    this.setTooltip("");
    this.setHelpUrl("");
  },
  onchange: function (event) {
    if (!this.workspace || this.workspace.isFlyout) {
      // Block is deleted or is in a flyout.
      return;
    }
    if (!event.recordUndo) {
      // Events not generated by user. Skip handling.
      return;
    }
  }
};

Blockly.Blocks['input'] = {
  init: function () {
    this.appendDummyInput()
      .appendField(new Blockly.FieldTextInput("input"), "input");
    this.setOutput(true, null);
    this.setColour(0);
    this.setTooltip("");
    this.setHelpUrl("");
  },
  onchange: function (event) {
    // Check if type name is duplicate
    if (workspace.isNameUsed(this.getFieldValue('input'), this.workspace, this))
      this.setWarningText("This name is already in use.");
    else
      this.setWarningText(null);
  }
};